---
#The playbook to provision vpc and their instnaces.

- hosts: localhost
  vars: 
   environ: stage
   aws_creds:
      AWS_DEFAULT_REGION: "{{ ec2_region }}"
      AWS_ACCESS_KEY: "{{ ec2_access_key }}"
      AWS_SECRET_KEY: "{{ ec2_secret_key }}" 
      AWS_ACCESS_KEY_ID: "{{ ec2_access_key }}"
      AWS_SECRET_ACCESS_KEY: "{{ ec2_secret_key }}"   
  tasks:
   - name: Install pip 
     yum: name=python-pip state=installed

   - name: Install the commandline tools for AWS
     pip: name=awscli state=present
   
   - name: Include the variables specific to the vpc
     include_vars: envs/{{ environ }}
   
   - name: Create the VPC 
     local_action:
        module: ec2_vpc
        state: present
        region: "{{ ec2_region }}"
        resource_tags:
            Environment: "{{ environ }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        subnets: "{{ vpc_subnets }}"
        dns_support: true
        dns_hostnames: true
        internet_gateway: "{{ vpc_internet_gateway|string }}"
        route_tables: "{{ vpc_route_tables_public }}"
        wait: true
     register: vpc
   
   - name: Write out a temporary file for mapping subnet to id
     template: src=templates/subnet_id.j2 dest=/tmp/subnet_id

   - name: Get the contents of subnet mapping file and set it as a fact
     set_fact:
      subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"
   
   - name: Create the nat security group for the VPC
     local_action:
       module: ec2_group
       name: "{{ vpc_nat_sec_group.name }}"
       description: "{{ vpc_nat_sec_group.desc }}"
       vpc_id: "{{ vpc.vpc_id }}"
       region: "{{ ec2_region }}"
       ec2_access_key: "{{ ec2_access_key }}"
       ec2_secret_key: "{{ ec2_secret_key }}"
       rules: "{{ vpc_nat_sec_group.rules }}"
     register: public_nat_group
   
   - name: Create the NAT Instance
     ec2:
      assign_public_ip: true
      group_id: "{{ public_nat_group.group_id }}"
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      instance_type: "{{ vpc_nat_instance_type }}"
      image: "{{ vpc_nat_instance_id }}"
      vpc_subnet_id: "{{ item.id }}"
      source_dest_check: false
      wait: true
      instance_tags: 
        Name: "{{ environ + '_nat_instance' }}"
      exact_count: 1
      count_tag: 
        Name: "{{ environ + '_nat_instance' }}"
     register: ec2
     with_items: vpc.subnets
     when: vpc_internet_gateway and item['resource_tags']['Tier'] is defined and item['resource_tags']['Tier'] == 'Web'


   - name: Get the routing table entry for the main table.
     shell: >
        aws ec2 describe-route-tables --filters "Name=vpc-id,Values={{ vpc.vpc_id }}" | grep -2 true | grep -m1 RouteTableId  | cut -d: -f2 | tr '\"' ' '
     register: main_rtb
     when: vpc.changed and vpc_internet_gateway
     environment: aws_creds

   - name: Set the fact for NAT Instance variable
     set_fact: nat_instance="{{ item.tagged_instances[0].id }}"
     with_items: ec2.results
     when: item.tagged_instances is defined

   - name: Set the gateway to nat interface.
     shell: >
        aws ec2 create-route --route-table-id {{ main_rtb.stdout }} --destination-cidr-block 0.0.0.0/0 --instance-id  {{ nat_instance }}
     when: vpc.changed and vpc_internet_gateway
     environment: aws_creds


   - name: Create the security group for the VPC
     ec2_group:
       name: "{{ item.name }}"
       description: "{{ item.desc }}"
       vpc_id: "{{ vpc.vpc_id }}"
       region: "{{ ec2_region }}"
       ec2_access_key: "{{ ec2_access_key }}"
       ec2_secret_key: "{{ ec2_secret_key }}"
       rules: "{{ item.rules }}"
     with_items: vpc_security_groups

   - name: Create the Instance's for this vpc 
     ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ item.keypair }}"
      assign_public_ip: "{{ item.assign_public_ip| default(False) }}"
      instance_type: "{{ item.instance_type }}"
      image: "{{ item.image }}"
      vpc_subnet_id: "{{ subnet_maps[item.subnet] }}"
      wait: true
      instance_tags: "{{ item.instance_tags }}"
      exact_count: "{{ item.exact_count }}"
      count_tag: "{{ item.count_tag }}"
      group: '{{ item.group }}'
     register: ec2
     with_items: vpc_instances
